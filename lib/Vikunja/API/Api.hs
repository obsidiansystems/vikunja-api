{-
   Vikunja API

   # Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

   OpenAPI Version: 3.0.1
   Vikunja API API version: 0.24.6
   Contact: hello@vikunja.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Vikunja.API.Api
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Vikunja.API.Api where

import Vikunja.Core
import Vikunja.MimeTypes
import Vikunja.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Api

-- *** routesGet

-- | @GET \/routes@
-- 
-- Get a list of all token api routes
-- 
-- Returns a list of all API routes which are available to use with an api token, not a user login.
-- 
-- AuthMethod: 'AuthApiKeyJWTKeyAuth'
-- 
routesGet
  :: VikunjaRequest RoutesGet MimeNoContent [ModelsRouteDetail] MimeJSON
routesGet =
  _mkRequest "GET" ["/routes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWTKeyAuth)

data RoutesGet  
-- | @application/json@
instance Produces RoutesGet MimeJSON


-- *** tokensGet

-- | @GET \/tokens@
-- 
-- Get all api tokens of the current user
-- 
-- Returns all api tokens the current user has created.
-- 
-- AuthMethod: 'AuthApiKeyJWTKeyAuth'
-- 
tokensGet
  :: VikunjaRequest TokensGet MimeNoContent [ModelsAPIToken] MimeJSON
tokensGet =
  _mkRequest "GET" ["/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWTKeyAuth)

data TokensGet  

-- | /Optional Param/ "page" - The page number, used for pagination. If not provided, the first page of results is returned.
instance HasOptionalParam TokensGet Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "per_page" - The maximum number of tokens per page. This parameter is limited by the configured maximum of items per page.
instance HasOptionalParam TokensGet PerPage where
  applyOptionalParam req (PerPage xs) =
    req `addQuery` toQuery ("per_page", Just xs)

-- | /Optional Param/ "s" - Search tokens by their title.
instance HasOptionalParam TokensGet S where
  applyOptionalParam req (S xs) =
    req `addQuery` toQuery ("s", Just xs)
-- | @application/json@
instance Produces TokensGet MimeJSON


-- *** tokensPut

-- | @PUT \/tokens@
-- 
-- Create a new api token
-- 
-- Create a new api token to use on behalf of the user creating it.
-- 
-- AuthMethod: 'AuthApiKeyJWTKeyAuth'
-- 
tokensPut
  :: (Consumes TokensPut MimeJSON, MimeRender MimeJSON ModelsAPIToken)
  => ModelsAPIToken -- ^ "token" -  The token object with required fields
  -> VikunjaRequest TokensPut MimeJSON ModelsAPIToken MimeJSON
tokensPut token =
  _mkRequest "PUT" ["/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWTKeyAuth)
    `setBodyParam` token

data TokensPut 

-- | /Body Param/ "token" - The token object with required fields
instance HasBodyParam TokensPut ModelsAPIToken 

-- | @application/json@
instance Consumes TokensPut MimeJSON

-- | @application/json@
instance Produces TokensPut MimeJSON


-- *** tokensTokenIDDelete

-- | @DELETE \/tokens\/{tokenID}@
-- 
-- Deletes an existing api token
-- 
-- Delete any of the user's api tokens.
-- 
-- AuthMethod: 'AuthApiKeyJWTKeyAuth'
-- 
tokensTokenIDDelete
  :: TokenId -- ^ "tokenId" -  Token ID
  -> VikunjaRequest TokensTokenIDDelete MimeNoContent ModelsMessage MimeJSON
tokensTokenIDDelete (TokenId tokenId) =
  _mkRequest "DELETE" ["/tokens/",toPath tokenId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyJWTKeyAuth)

data TokensTokenIDDelete  
-- | @application/json@
instance Produces TokensTokenIDDelete MimeJSON

